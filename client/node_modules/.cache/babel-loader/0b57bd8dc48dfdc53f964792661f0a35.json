{"ast":null,"code":"const patientIcon = \"https://img.icons8.com/ios/50/000000/consultation.png\";\nconst doctorIcon = \"https://img.icons8.com/wired/64/000000/medical-doctor.png\"; //Get all messages between current user and selected user\n\nexport const getMessages = (chatPage, isDoctor) => {\n  const url = isDoctor ? \"/doctors/check-session\" : \"/patients/check-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && (json.currentPatient || json.currentDoctor)) {\n      if (!isDoctor) {\n        chatPage.setState({\n          currentPatient: json.currentPatient\n        });\n      } else {\n        chatPage.setState({\n          currentDoctor: json.currentDoctor\n        });\n      }\n    }\n\n    const url1 = isDoctor ? \"/patients/contact-session\" : \"/doctors/contact-session\";\n    fetch(url1).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    }).then(json => {\n      if (json && (json.selectedDoctor || json.selectedPatient)) {\n        if (!isDoctor) {\n          chatPage.setState({\n            selectedDoctor: json.selectedDoctor\n          });\n        } else {\n          chatPage.setState({\n            selectedPatient: json.selectedPatient\n          });\n        }\n      }\n\n      const p = isDoctor ? chatPage.state.selectedPatient.username : chatPage.state.currentPatient.username;\n      const d = isDoctor ? chatPage.state.currentDoctor.username : chatPage.state.selectedDoctor.username;\n      const url2 = `/messages/${p}/${d}`;\n      fetch(url2).then(res => {\n        if (res.status === 200) {\n          return res.json();\n        }\n      }).then(json => {\n        const messages = [];\n\n        for (let i = 0; i < json.length; i++) {\n          messages.push({\n            \"text\": json[i].text,\n            \"id\": (i + 1).toString(),\n            \"sender\": {\n              \"name\": json[i].sender,\n              \"uid\": json[i].sender === p ? \"2\" : \"1\",\n              \"avatar\": json[i].sender === p ? patientIcon : doctorIcon\n            }\n          });\n        }\n\n        chatPage.setState({\n          messages: messages\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Send message event listener(prePatientChat page)\n//Update selected doctor by click related doctor send message button\n//Go to PatientChatPage\n\nexport const setPatientChatPage = (doctor, app, history) => {\n  const url1 = `/doctors/${doctor}`;\n  fetch(url1).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    app.setState({\n      selectedDoctor: json[0]\n    });\n    const url = \"/patients\";\n    const data = {\n      patient: app.state.currentPatient,\n      doctor: json[0]\n    };\n    const request = new Request(url, {\n      method: \"put\",\n      body: JSON.stringify(data),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    fetch(request).then(res => {\n      history.push(\"/ChatPage/PatientChatPage\");\n    }).catch(error => {\n      console.log(error);\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Get patient message by current doctor as receiver and set page state\n\nexport const getPatientMessage = pdc => {\n  const url = \"/doctors/check-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.currentDoctor) {\n      pdc.setState({\n        currentDoctor: json.currentDoctor\n      });\n    }\n\n    const url1 = `/messages/${pdc.state.currentDoctor.username}`;\n    fetch(url1).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    }).then(json => {\n      const patientMessages = [];\n\n      while (json.length > 0) {\n        let message = json.pop();\n        json = json.filter(m => m.sender !== message.sender);\n        patientMessages.push(message);\n      }\n\n      pdc.setState({\n        patientMessages: patientMessages\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Send message event listener(preDoctorChat page)\n//Update selected patient by click related patient send message button\n//Go to DoctorChatPage\n\nexport const setDoctorChatPage = (patient, app, history) => {\n  const url = `/patients/${patient}`;\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    app.setState({\n      selectedPatient: json[0]\n    });\n    history.push(\"/ChatPage/DoctorChatPage\");\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Set all previous non-replied messages to replied\n\nconst messageReplied = (receiver, sender) => {\n  const request = new Request(\"/messages/replied\", {\n    method: \"post\",\n    body: JSON.stringify({\n      sender: sender,\n      receiver: receiver\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  fetch(request).catch(error => {\n    console.log(error);\n  });\n}; //Chat box message send  event listener\n//Send message to database\n\n\nexport const sendMessage = (message, cp) => {\n  const sender = cp.state.isDoctor ? cp.state.currentDoctor.username : cp.state.currentPatient.username;\n  const receiver = cp.state.isDoctor ? cp.state.selectedPatient.username : cp.state.selectedDoctor.username;\n  messageReplied(sender, receiver);\n  const data = {\n    sender: sender,\n    receiver: receiver,\n    text: message,\n    isReplied: false\n  };\n  const request = new Request(\"/messages\", {\n    method: \"post\",\n    body: JSON.stringify(data),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      console.log(\"success\");\n    } else {\n      console.log(\"failed\");\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Chat box message send event listener\n//Change ChatPage state to display message\n\nexport const displayMessage = (message, chatPage) => {\n  const avatar = chatPage.state.isDoctor ? doctorIcon : patientIcon;\n  const newMessage = {\n    \"text\": message,\n    \"id\": chatPage.state.messages.length + 1,\n    \"sender\": {\n      \"name\": chatPage.state.name,\n      \"uid\": chatPage.state.user.uid,\n      \"avatar\": avatar\n    }\n  };\n  chatPage.state.messages.push(newMessage);\n};","map":{"version":3,"sources":["/Users/yehuang/covid_consultant/client/src/actions/message.js"],"names":["patientIcon","doctorIcon","getMessages","chatPage","isDoctor","url","fetch","then","res","status","json","currentPatient","currentDoctor","setState","url1","selectedDoctor","selectedPatient","p","state","username","d","url2","messages","i","length","push","text","toString","sender","catch","error","console","log","setPatientChatPage","doctor","app","history","data","patient","request","Request","method","body","JSON","stringify","headers","Accept","getPatientMessage","pdc","patientMessages","message","pop","filter","m","setDoctorChatPage","messageReplied","receiver","sendMessage","cp","isReplied","displayMessage","avatar","newMessage","name","user","uid"],"mappings":"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","sourcesContent":["const patientIcon = \"https://img.icons8.com/ios/50/000000/consultation.png\";\nconst doctorIcon = \"https://img.icons8.com/wired/64/000000/medical-doctor.png\";\n\n\n//Get all messages between current user and selected user\nexport const getMessages = (chatPage, isDoctor) => {\n    const url = isDoctor ? \"/doctors/check-session\" : \"/patients/check-session\";\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && (json.currentPatient || json.currentDoctor)) {\n                if (!isDoctor) {\n                    chatPage.setState({currentPatient: json.currentPatient})\n                } else {\n                    chatPage.setState({currentDoctor: json.currentDoctor})\n                }\n            }\n            const url1 = isDoctor ? \"/patients/contact-session\" : \"/doctors/contact-session\";\n            fetch(url1)\n                .then((res) => {\n                    if (res.status === 200) {\n                        return res.json();\n                    }\n                })\n                .then((json) => {\n                    if (json && (json.selectedDoctor || json.selectedPatient)) {\n                        if (!isDoctor) {\n                            chatPage.setState({selectedDoctor: json.selectedDoctor});\n                        } else {\n                            chatPage.setState({selectedPatient: json.selectedPatient})\n                        }\n                    }\n                    const p = isDoctor ? chatPage.state.selectedPatient.username : chatPage.state.currentPatient.username;\n                    const d = isDoctor ? chatPage.state.currentDoctor.username : chatPage.state.selectedDoctor.username;\n                    const url2 = `/messages/${p}/${d}`;\n                    fetch(url2)\n                        .then((res) => {\n                            if (res.status === 200) {\n                                return res.json();\n                            }\n                        })\n                        .then((json) => {\n                            const messages = [];\n                            for (let i = 0; i < json.length; i++) {\n                                messages.push({\n                                    \"text\": json[i].text,\n                                    \"id\": (i + 1).toString(),\n                                    \"sender\": {\n                                        \"name\": json[i].sender,\n                                        \"uid\": json[i].sender === p ? \"2\" : \"1\",\n                                        \"avatar\": json[i].sender === p ? patientIcon : doctorIcon\n                                    }\n                                })\n                            }\n                            chatPage.setState({\n                                messages: messages\n                            })\n                        })\n                        .catch((error) => {\n                            console.log(error);\n                        })\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n};\n\n//Send message event listener(prePatientChat page)\n//Update selected doctor by click related doctor send message button\n//Go to PatientChatPage\nexport const setPatientChatPage = (doctor, app, history) => {\n    const url1 = `/doctors/${doctor}`;\n    fetch(url1).then((res) => {\n        if (res.status === 200) {\n            return res.json()\n        }\n    }).then((json) => {\n        app.setState({\n            selectedDoctor: json[0]\n        });\n        const url = \"/patients\";\n        const data = {\n            patient: app.state.currentPatient,\n            doctor: json[0]\n        };\n        const request = new Request(url, {\n            method: \"put\",\n            body: JSON.stringify(data),\n            headers: {\n                Accept: \"application/json, text/plain, */*\",\n                \"Content-Type\": \"application/json\",\n            },\n        });\n        fetch(request).then((res) => {\n            history.push(\"/ChatPage/PatientChatPage\")\n        }).catch((error) => {\n            console.log(error)\n        });\n    }).catch((error) => {\n        console.log(error);\n    });\n};\n\n//Get patient message by current doctor as receiver and set page state\nexport const getPatientMessage = (pdc) => {\n    const url = \"/doctors/check-session\";\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && json.currentDoctor) {\n                pdc.setState({currentDoctor: json.currentDoctor});\n            }\n            const url1 = `/messages/${pdc.state.currentDoctor.username}`;\n            fetch(url1)\n                .then((res) => {\n                    if (res.status === 200) {\n                        return res.json();\n                    }\n                })\n                .then((json) => {\n                    const patientMessages = [];\n                    while (json.length > 0) {\n                        let message = json.pop();\n                        json = json.filter(m => m.sender !== message.sender);\n                        patientMessages.push(message)\n                    }\n                    pdc.setState({\n                        patientMessages: patientMessages\n                    })\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n};\n//Send message event listener(preDoctorChat page)\n//Update selected patient by click related patient send message button\n//Go to DoctorChatPage\nexport const setDoctorChatPage = (patient, app, history) => {\n    const url = `/patients/${patient}`;\n    fetch(url).then((res) => {\n        if (res.status === 200) {\n            return res.json()\n        }\n    }).then((json) => {\n        app.setState({\n            selectedPatient: json[0]\n        });\n        history.push(\"/ChatPage/DoctorChatPage\")\n    }).catch(error => {\n        console.log(error)\n    })\n};\n\n//Set all previous non-replied messages to replied\nconst messageReplied = (receiver, sender) => {\n    const request = new Request(\"/messages/replied\", {\n        method: \"post\",\n        body: JSON.stringify({\n            sender: sender,\n            receiver: receiver\n        }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n    fetch(request).catch(error => {\n        console.log(error)\n    })\n};\n\n//Chat box message send  event listener\n//Send message to database\nexport const sendMessage = (message, cp) => {\n    const sender = cp.state.isDoctor ? cp.state.currentDoctor.username : cp.state.currentPatient.username;\n    const receiver = cp.state.isDoctor ? cp.state.selectedPatient.username : cp.state.selectedDoctor.username;\n    messageReplied(sender, receiver);\n    const data = {\n        sender: sender,\n        receiver: receiver,\n        text: message,\n        isReplied: false\n    };\n    const request = new Request(\"/messages\", {\n        method: \"post\",\n        body: JSON.stringify(data),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n    fetch(request).then(res => {\n        if (res.status === 200) {\n            console.log(\"success\")\n        } else {\n            console.log(\"failed\")\n        }\n    }).catch(error => {\n        console.log(error)\n    })\n};\n\n//Chat box message send event listener\n//Change ChatPage state to display message\nexport const displayMessage = (message, chatPage) => {\n    const avatar = chatPage.state.isDoctor ? doctorIcon : patientIcon;\n    const newMessage = {\n        \"text\": message,\n        \"id\": chatPage.state.messages.length + 1,\n        \"sender\": {\n            \"name\": chatPage.state.name,\n            \"uid\": chatPage.state.user.uid,\n            \"avatar\": avatar,\n        },\n    };\n    chatPage.state.messages.push(newMessage);\n};\n"]},"metadata":{},"sourceType":"module"}