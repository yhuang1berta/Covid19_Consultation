{"ast":null,"code":"import _defineProperty from\"/Users/yehuang/covid_consultant/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";//get admin session cookie with admin information back in order to keep admin logged in\nexport var readAdminCookie=function readAdminCookie(app){var url=\"/admins/check-session\";fetch(url).then(function(res){if(res.status===200){return res.json();}}).then(function(json){if(json&&json.currentAdmin){app.setState({currentAdmin:json.currentAdmin});}}).catch(function(error){console.log(error);});};// used to set state for the login process for admin's end\nexport var updateLoginForm=function updateLoginForm(loginComp,field){var value=field.value;var name=field.name;loginComp.setState(_defineProperty({},name,value));};//admin login\nexport var login=function login(loginComp,app){var request=new Request(\"/admins/login\",{method:\"post\",body:JSON.stringify(loginComp.state),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});fetch(request).then(function(res){if(res.status===200){return res.json();}else{console.log(res.status);throw new Error();}}).then(function(json){console.log(json);if(json.currentAdmin!==null&&json.currentAdmin.username!==undefined){app.setState({currentAdmin:json.currentAdmin});}}).catch(function(error){console.log(error);loginComp.setState({wrong:true});});};//admin logout\nexport var logout=function logout(app){var url=\"/logout\";fetch(url).then(function(res){app.setState({currentAdmin:null,message:{type:\"\",body:\"\"}});}).catch(function(error){console.log(error);});};// Get all the doctor objects for Doctor table component in admin dashboard\nexport var getDoctors=function getDoctors(app){var url=\"/doctors\";fetch(url).then(function(res){if(res.status===200){return res.json();}else{throw new Error();}}).then(function(json){if(json!==null&&json!==undefined){console.log(\"getDoctor before: \");console.log(app.state);app.setState({doctors:json});console.log(\"getDoctor after: \");console.log(app.state);}else{app.setState({error:\"Cannot retrieve Doctor accounts information!\"});}}).catch(function(e){app.setState({error:\"Cannot retrieve Doctor accounts information!\"});});};// Get all the patient objects for Doctor table component in admin dashboard\nexport var getPatients=function getPatients(app){var url=\"/patients\";fetch(url).then(function(res){if(res.status===200){return res.json();}else{throw new Error();}}).then(function(json){if(json!==null&&json!==undefined){app.setState({patients:json});// app.setState({error: \"success\"})\n}else{app.setState({error:\"Cannot retrieve patient accounts information!\"});}}).catch(function(e){app.setState({error:\"Cannot retrieve patient accounts information!\"});});};// used to send update request to patient object after admin end changes its info.\nexport var updatePatient=function updatePatient(app,patient){var request=new Request(\"/admins/patient-update/\".concat(patient._id),{method:\"put\",body:JSON.stringify({patient:patient}),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});console.log(JSON.stringify(patient));console.log(patient._id);fetch(request).then(function(res){if(res.status===200){app.setState({error:\"\",success:\"Patient (id: \".concat(patient._id,\") updated sucessfully!\")});}else{throw new Error();}}).catch(function(e){app.setState({error:\"Update Failed, please try again later!\",success:\"\"});});};// used to send update request to doctor object after admin end changes its info.\nexport var updateDoctor=function updateDoctor(app,doctor){var request=new Request(\"/admins/doctor-update/\".concat(doctor._id),{method:\"put\",body:JSON.stringify({doctor:doctor}),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});console.log(doctor);fetch(request).then(function(res){if(res.status===200){app.setState({error:\"\",success:\"Doctor (id: \".concat(doctor._id,\") updated sucessfully!\")});}else{throw new Error();}}).catch(function(e){app.setState({error:\"Update Failed, please try again later!\",success:\"\"});});};","map":{"version":3,"sources":["/Users/yehuang/covid_consultant/client/src/actions/admin.js"],"names":["readAdminCookie","app","url","fetch","then","res","status","json","currentAdmin","setState","catch","error","console","log","updateLoginForm","loginComp","field","value","name","login","request","Request","method","body","JSON","stringify","state","headers","Accept","Error","username","undefined","wrong","logout","message","type","getDoctors","doctors","e","getPatients","patients","updatePatient","patient","_id","success","updateDoctor","doctor"],"mappings":"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","sourcesContent":["//get admin session cookie with admin information back in order to keep admin logged in\nexport const readAdminCookie = (app) => {\n    const url = \"/admins/check-session\";\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && json.currentAdmin) {\n                app.setState({currentAdmin: json.currentAdmin});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n};\n\n// used to set state for the login process for admin's end\nexport const updateLoginForm = (loginComp, field) => {\n    const value = field.value;\n    const name = field.name;\n\n    loginComp.setState({\n        [name]: value,\n    });\n};\n\n//admin login\nexport const login = (loginComp, app) => {\n    const request = new Request(\"/admins/login\", {\n        method: \"post\",\n        body: JSON.stringify(loginComp.state),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            } else {\n                console.log(res.status);\n                throw new Error();\n            }\n        })\n        .then((json) => {\n            console.log(json);\n            if (\n                json.currentAdmin !== null &&\n                json.currentAdmin.username !== undefined\n            ) {\n                app.setState({currentAdmin: json.currentAdmin});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n            loginComp.setState({wrong: true});\n        });\n};\n\n//admin logout\nexport const logout = (app) => {\n    const url = \"/logout\";\n\n    fetch(url)\n        .then((res) => {\n            app.setState({\n                currentAdmin: null,\n                message: {type: \"\", body: \"\"},\n            });\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n};\n\n// Get all the doctor objects for Doctor table component in admin dashboard\nexport const getDoctors = (app) => {\n    const url = \"/doctors\";\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            } else {\n                throw new Error();\n            }\n        })\n        .then((json) => {\n            if (json !== null && json !== undefined) {\n                console.log(\"getDoctor before: \");\n                console.log(app.state);\n                app.setState({doctors: json});\n                console.log(\"getDoctor after: \");\n                console.log(app.state);\n            } else {\n                app.setState({error: \"Cannot retrieve Doctor accounts information!\"});\n            }\n        })\n        .catch((e) => {\n            app.setState({error: \"Cannot retrieve Doctor accounts information!\"});\n        });\n};\n\n// Get all the patient objects for Doctor table component in admin dashboard\nexport const getPatients = (app) => {\n    const url = \"/patients\";\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            } else {\n                throw new Error();\n            }\n        })\n        .then((json) => {\n            if (json !== null && json !== undefined) {\n                app.setState({patients: json});\n                // app.setState({error: \"success\"})\n            } else {\n                app.setState({\n                    error: \"Cannot retrieve patient accounts information!\",\n                });\n            }\n        })\n        .catch((e) => {\n            app.setState({error: \"Cannot retrieve patient accounts information!\"});\n        });\n};\n\n// used to send update request to patient object after admin end changes its info.\nexport const updatePatient = (app, patient) => {\n    const request = new Request(`/admins/patient-update/${patient._id}`, {\n        method: \"put\",\n        body: JSON.stringify({patient: patient}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    console.log(JSON.stringify(patient));\n    console.log(patient._id);\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                app.setState({\n                    error: \"\",\n                    success: `Patient (id: ${patient._id}) updated sucessfully!`,\n                });\n            } else {\n                throw new Error();\n            }\n        })\n        .catch((e) => {\n            app.setState({\n                error: \"Update Failed, please try again later!\",\n                success: \"\",\n            });\n        });\n};\n\n// used to send update request to doctor object after admin end changes its info.\nexport const updateDoctor = (app, doctor) => {\n    const request = new Request(`/admins/doctor-update/${doctor._id}`, {\n        method: \"put\",\n        body: JSON.stringify({doctor: doctor}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    console.log(doctor);\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                app.setState({\n                    error: \"\",\n                    success: `Doctor (id: ${doctor._id}) updated sucessfully!`,\n                });\n            } else {\n                throw new Error();\n            }\n        })\n        .catch((e) => {\n            app.setState({\n                error: \"Update Failed, please try again later!\",\n                success: \"\",\n            });\n        });\n};\n"]},"metadata":{},"sourceType":"module"}