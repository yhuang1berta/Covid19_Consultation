{"ast":null,"code":"// used to verify the account that is login in, and set the current patient to the patient that's login in.\nexport const readPatientCookie = app => {\n  const url = \"/patients/check-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.currentPatient) {\n      app.setState({\n        currentPatient: json.currentPatient\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; //read cookie to get selected patient\n\nexport const readSelectedPatientCookie = app => {\n  const url = \"/patients/contact-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.selectedPatient) {\n      app.setState({\n        selectedPatient: json.selectedPatient\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // used to set state for the login process for patient's end\n\nexport const updateLoginForm = (loginComp, field) => {\n  const value = field.value;\n  const name = field.name;\n  loginComp.setState({\n    [name]: value\n  });\n};\nexport const login = (loginComp, app) => {\n  const request = new Request(\"/patients/login\", {\n    method: \"post\",\n    body: JSON.stringify(loginComp.state),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  }); // code used to bypass account authentication when server is down, remove as needed\n\n  if (loginComp.state.username === \"test\" && loginComp.state.password === \"test\") {\n    app.setState({\n      currentPatient: {\n        \"username\": \"test\"\n      }\n    });\n    return;\n  } // console.log(JSON.stringify(loginComp.state))\n\n\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    console.log(json);\n    console.log(json.currentPatient);\n\n    if (json.currentPatient !== null && json.currentPatient.username !== undefined) {\n      console.log(\"entered\");\n      app.setState({\n        currentPatient: json.currentPatient\n      });\n      console.log(app.state);\n    }\n  }).catch(error => {\n    console.log(error);\n    loginComp.setState({\n      wrong: true\n    });\n  });\n}; // used to send register request to server end\n\nexport const register = (registerComp, app, history) => {\n  const url = \"/patients\";\n  const patient = registerComp.state;\n  const request = new Request(url, {\n    method: \"post\",\n    body: JSON.stringify(patient),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-type\": \"application/json\"\n    }\n  });\n  fetch(request).then(function (res) {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (!app.state.currentPatient && app.state.currentPatient !== undefined) {\n      // app.setState({currentPatient: json})\n      history.push(\"/PatientLogin\");\n    }\n  }).catch(e => {\n    registerComp.error = \"Patient account cannot be created at the moment!\";\n    registerComp.setState(registerComp.state);\n  });\n}; // Log out from the current user on patient end.\n\nexport const logout = app => {\n  const url = \"/logout\";\n  fetch(url).then(res => {\n    app.setState({\n      currentPatient: null,\n      message: {\n        type: \"\",\n        body: \"\"\n      },\n      selectedDoctor: null\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Update selectedDoctor cookie to null\n\nexport const updateSelectedDoctor = () => {\n  const url = \"/doctors/contact-session\";\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({\n      selectedDoctor: null\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-type\": \"application/json\"\n    }\n  });\n  return new Promise(resolve => {\n    fetch(request).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    }).then(json => {\n      resolve(json);\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Set main.state.selectedDoctor by read selectedDoctor cookie\n\nexport const endPatientChat = app => {\n  updateSelectedDoctor().then(json => {\n    if (json) {\n      app.setState({\n        selectedDoctor: json.selectedDoctor\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // used to send request to get all patient objects, used in PatientTable component in admin dashboard to get all patients\n\nexport const readPatientVisitHistory = app => {\n  const patient = app.state.patient;\n  console.log(\"patient:\");\n  console.log(patient);\n  const url = `/patients/read-patient-visit-history/${patient.id}`;\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (json !== null && json !== undefined) {\n      app.setState({\n        patient: json,\n        loading: false\n      });\n      console.log(\"state resetted\");\n    }\n  }).catch(e => {\n    console.log(e);\n  });\n};","map":{"version":3,"sources":["/Users/yehuang/covid_consultant/client/src/actions/patients.js"],"names":["readPatientCookie","app","url","fetch","then","res","status","json","currentPatient","setState","catch","error","console","log","readSelectedPatientCookie","selectedPatient","updateLoginForm","loginComp","field","value","name","login","request","Request","method","body","JSON","stringify","state","headers","Accept","username","password","undefined","wrong","register","registerComp","history","patient","Error","push","e","logout","message","type","selectedDoctor","updateSelectedDoctor","Promise","resolve","endPatientChat","readPatientVisitHistory","id","loading"],"mappings":"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","sourcesContent":["// used to verify the account that is login in, and set the current patient to the patient that's login in.\nexport const readPatientCookie = (app) => {\n    const url = \"/patients/check-session\";\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && json.currentPatient) {\n                app.setState({currentPatient: json.currentPatient});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n};\n\n//read cookie to get selected patient\nexport const readSelectedPatientCookie = (app) => {\n    const url = \"/patients/contact-session\";\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && json.selectedPatient) {\n                app.setState({selectedPatient: json.selectedPatient});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n};\n\n// used to set state for the login process for patient's end\nexport const updateLoginForm = (loginComp, field) => {\n    const value = field.value;\n    const name = field.name;\n\n    loginComp.setState({\n        [name]: value,\n    });\n};\n\n\nexport const login = (loginComp, app) => {\n    const request = new Request(\"/patients/login\", {\n        method: \"post\",\n        body: JSON.stringify(loginComp.state),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    // code used to bypass account authentication when server is down, remove as needed\n    if (loginComp.state.username === \"test\" && loginComp.state.password === \"test\") {\n        app.setState({currentPatient: {\"username\": \"test\"}});\n        return;\n    }\n    // console.log(JSON.stringify(loginComp.state))\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            console.log(json);\n            console.log(json.currentPatient);\n            if (json.currentPatient !== null && json.currentPatient.username !== undefined) {\n                console.log(\"entered\")\n                app.setState({currentPatient: json.currentPatient});\n                console.log(app.state)\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n            loginComp.setState({wrong: true})\n        })\n\n\n};\n\n// used to send register request to server end\nexport const register = (registerComp, app, history) => {\n    const url = \"/patients\";\n\n    const patient = registerComp.state;\n\n    const request = new Request(url, {\n        method: \"post\",\n        body: JSON.stringify(patient),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-type\": \"application/json\",\n        },\n    });\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                throw new Error()\n            }\n        })\n        .then((json) => {\n            if (!app.state.currentPatient && app.state.currentPatient !== undefined) {\n                // app.setState({currentPatient: json})\n                history.push(\"/PatientLogin\")\n            }\n        })\n        .catch((e) => {\n            registerComp.error = \"Patient account cannot be created at the moment!\"\n            registerComp.setState(registerComp.state)\n        })\n};\n\n// Log out from the current user on patient end.\nexport const logout = (app) => {\n    const url = \"/logout\";\n    fetch(url)\n        .then((res) => {\n            app.setState({\n                currentPatient: null,\n                message: {type: \"\", body: \"\"},\n                selectedDoctor: null\n            });\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n};\n\n//Update selectedDoctor cookie to null\nexport const updateSelectedDoctor = () => {\n    const url = \"/doctors/contact-session\";\n    const request = new Request(url, {\n        method: \"put\",\n        body: JSON.stringify({\n            selectedDoctor: null\n        }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-type\": \"application/json\",\n        },\n    });\n    return new Promise(resolve => {\n        fetch(request).then(res => {\n            if (res.status === 200) {\n                return res.json()\n            }\n        }).then(json => {\n            resolve(json)\n        })\n    }).catch(error => {\n        console.log(error)\n    })\n};\n\n//Set main.state.selectedDoctor by read selectedDoctor cookie\nexport const endPatientChat = (app) => {\n\n    updateSelectedDoctor().then(json => {\n        if (json) {\n            app.setState(\n                {\n                    selectedDoctor: json.selectedDoctor\n                })\n        }\n    })\n        .catch(error => {\n        console.log(error);\n    });\n};\n\n// used to send request to get all patient objects, used in PatientTable component in admin dashboard to get all patients\nexport const readPatientVisitHistory = (app) => {\n\n    const patient = app.state.patient\n    console.log(\"patient:\")\n    console.log(patient)\n    const url = `/patients/read-patient-visit-history/${patient.id}`\n\n    fetch(url)\n    .then((res) => {\n        if (res.status === 200) {\n            return res.json()\n        } else {\n            throw new Error()\n        }\n    })\n    .then((json) => {\n        if (json !== null && json !== undefined) {\n            app.setState({patient: json, loading: false})\n            console.log(\"state resetted\")\n        }\n    })\n    .catch((e) => {\n        console.log(e)\n    })\n}\n\n"]},"metadata":{},"sourceType":"module"}