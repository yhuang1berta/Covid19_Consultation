{"ast":null,"code":"export const readPatientCookie = app => {\n  const url = \"/patients/check-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.currentPatient) {\n      app.setState({\n        currentPatient: json\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const updateLoginForm = (loginComp, field) => {\n  const value = field.value;\n  const name = field.name;\n  loginComp.setState({\n    [name]: value\n  });\n};\nexport const login = (loginComp, app) => {\n  const request = new Request(\"/patients/login\", {\n    method: \"post\",\n    body: JSON.stringify(loginComp.state),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    console.log(json);\n    console.log(json.currentPatient);\n\n    if (json.currentPatient !== null && json.currentPatient.username !== undefined) {\n      console.log(\"entered\");\n      app.setState({\n        currentPatient: json.currentPatient\n      });\n      console.log(app.state);\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const register = (registerComp, app) => {\n  const url = \"/patients\";\n  const patient = registerComp.state;\n  const request = new Request(url, {\n    method: \"post\",\n    body: JSON.stringify(patient),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-type\": \"application/json\"\n    }\n  }); // console.log(JSON.stringify(patient));\n\n  fetch(request).then(function (res) {\n    // console.log(\"first then: \")\n    // console.log(app.state)\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (!app.state.currentPatient && app.state.currentPatient !== undefined) {\n      app.setState({\n        currentPatient: json\n      });\n    }\n  }).catch(e => {\n    registerComp.error = \"Patient account cannot be created at the moment!\";\n    registerComp.setState(registerComp.state);\n  });\n};\nexport const logout = app => {\n  const url = \"/logout\";\n  fetch(url).then(res => {\n    app.setState({\n      currentPatient: null,\n      message: {\n        type: \"\",\n        body: \"\"\n      }\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"sources":["/Users/yehuang/309_group/client/src/actions/patients.js"],"names":["readPatientCookie","app","url","fetch","then","res","status","json","currentPatient","setState","catch","error","console","log","updateLoginForm","loginComp","field","value","name","login","request","Request","method","body","JSON","stringify","state","headers","Accept","username","undefined","register","registerComp","patient","Error","e","logout","message","type"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAIC,GAAD,IAAS;AACxC,QAAMC,GAAG,GAAG,yBAAZ;AAEAC,EAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;AACF,GALH,EAMGH,IANH,CAMSG,IAAD,IAAU;AACd,QAAIA,IAAI,IAAIA,IAAI,CAACC,cAAjB,EAAiC;AAC/BP,MAAAA,GAAG,CAACQ,QAAJ,CAAa;AAAED,QAAAA,cAAc,EAAED;AAAlB,OAAb;AACD;AACF,GAVH,EAWGG,KAXH,CAWUC,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAbH;AAcD,CAjBM;AAmBP,OAAO,MAAMG,eAAe,GAAG,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACnD,QAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;AACA,QAAMC,IAAI,GAAGF,KAAK,CAACE,IAAnB;AAEAH,EAAAA,SAAS,CAACN,QAAV,CAAmB;AACjB,KAACS,IAAD,GAAQD;AADS,GAAnB;AAGD,CAPM;AASP,OAAO,MAAME,KAAK,GAAG,CAACJ,SAAD,EAAYd,GAAZ,KAAoB;AACvC,QAAMmB,OAAO,GAAG,IAAIC,OAAJ,CAAY,iBAAZ,EAA+B;AAC7CC,IAAAA,MAAM,EAAE,MADqC;AAE7CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,SAAS,CAACW,KAAzB,CAFuC;AAG7CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,mCADD;AAEP,sBAAgB;AAFT;AAHoC,GAA/B,CAAhB;AASAzB,EAAAA,KAAK,CAACiB,OAAD,CAAL,CACGhB,IADH,CACSC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;AACF,GALH,EAMGH,IANH,CAMSG,IAAD,IAAU;AACdK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACC,cAAjB;;AACA,QAAID,IAAI,CAACC,cAAL,KAAwB,IAAxB,IAAgCD,IAAI,CAACC,cAAL,CAAoBqB,QAApB,KAAiCC,SAArE,EAAgF;AAC9ElB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAZ,MAAAA,GAAG,CAACQ,QAAJ,CAAa;AAAED,QAAAA,cAAc,EAAED,IAAI,CAACC;AAAvB,OAAb;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAG,CAACyB,KAAhB;AACD;AACF,GAdH,EAeGhB,KAfH,CAeUC,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAjBH;AAkBD,CA5BM;AA8BP,OAAO,MAAMoB,QAAQ,GAAG,CAACC,YAAD,EAAe/B,GAAf,KAAuB;AAC7C,QAAMC,GAAG,GAAG,WAAZ;AAEA,QAAM+B,OAAO,GAAGD,YAAY,CAACN,KAA7B;AAEA,QAAMN,OAAO,GAAG,IAAIC,OAAJ,CAAYnB,GAAZ,EAAiB;AAC/BoB,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeQ,OAAf,CAFyB;AAG/BN,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,mCADD;AAEP,sBAAgB;AAFT;AAHsB,GAAjB,CAAhB,CAL6C,CAc7C;;AAEAzB,EAAAA,KAAK,CAACiB,OAAD,CAAL,CACGhB,IADH,CACQ,UAAUC,GAAV,EAAe;AACnB;AACA;AACA,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAI2B,KAAJ,EAAN;AACD;AACF,GATH,EAUG9B,IAVH,CAUSG,IAAD,IAAU;AACd,QAAI,CAACN,GAAG,CAACyB,KAAJ,CAAUlB,cAAX,IAA6BP,GAAG,CAACyB,KAAJ,CAAUlB,cAAV,KAA6BsB,SAA9D,EAAyE;AACvE7B,MAAAA,GAAG,CAACQ,QAAJ,CAAa;AAAED,QAAAA,cAAc,EAAED;AAAlB,OAAb;AACD;AAEF,GAfH,EAgBGG,KAhBH,CAgBUyB,CAAD,IAAO;AACZH,IAAAA,YAAY,CAACrB,KAAb,GAAqB,kDAArB;AACAqB,IAAAA,YAAY,CAACvB,QAAb,CAAsBuB,YAAY,CAACN,KAAnC;AACD,GAnBH;AAoBD,CApCM;AAsCP,OAAO,MAAMU,MAAM,GAAInC,GAAD,IAAS;AAC7B,QAAMC,GAAG,GAAG,SAAZ;AAEAC,EAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAAS;AACbJ,IAAAA,GAAG,CAACQ,QAAJ,CAAa;AACXD,MAAAA,cAAc,EAAE,IADL;AAEX6B,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAE,EAAR;AAAYf,QAAAA,IAAI,EAAE;AAAlB;AAFE,KAAb;AAID,GANH,EAOGb,KAPH,CAOUC,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GATH;AAUD,CAbM","sourcesContent":["export const readPatientCookie = (app) => {\n  const url = \"/patients/check-session\";\n\n  fetch(url)\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    })\n    .then((json) => {\n      if (json && json.currentPatient) {\n        app.setState({ currentPatient: json });\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nexport const updateLoginForm = (loginComp, field) => {\n  const value = field.value;\n  const name = field.name;\n\n  loginComp.setState({\n    [name]: value,\n  });\n};\n\nexport const login = (loginComp, app) => {\n  const request = new Request(\"/patients/login\", {\n    method: \"post\",\n    body: JSON.stringify(loginComp.state),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  fetch(request)\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    })\n    .then((json) => {\n      console.log(json);\n      console.log(json.currentPatient)\n      if (json.currentPatient !== null && json.currentPatient.username !== undefined) {\n        console.log(\"entered\")\n        app.setState({ currentPatient: json.currentPatient });\n        console.log(app.state)\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nexport const register = (registerComp, app) => {\n  const url = \"/patients\";\n\n  const patient = registerComp.state;\n\n  const request = new Request(url, {\n    method: \"post\",\n    body: JSON.stringify(patient),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-type\": \"application/json\",\n    },\n  });\n\n  // console.log(JSON.stringify(patient));\n\n  fetch(request)\n    .then(function (res) {\n      // console.log(\"first then: \")\n      // console.log(app.state)\n      if (res.status === 200) {\n        return res.json()\n      } else {\n        throw new Error()\n      }\n    })\n    .then((json) => {\n      if (!app.state.currentPatient && app.state.currentPatient !== undefined) {\n        app.setState({ currentPatient: json})\n      }\n      \n    })\n    .catch((e) => {\n      registerComp.error = \"Patient account cannot be created at the moment!\"\n      registerComp.setState(registerComp.state)\n    });\n};\n\nexport const logout = (app) => {\n  const url = \"/logout\";\n\n  fetch(url)\n    .then((res) => {\n      app.setState({\n        currentPatient: null,\n        message: { type: \"\", body: \"\" },\n      });\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}