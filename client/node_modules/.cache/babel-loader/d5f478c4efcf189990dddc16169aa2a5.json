{"ast":null,"code":"//get doctor session cookie with doctor information back in order to keep doctor logged in\nexport const readDoctorCookie = app => {\n  const url = \"/doctors/check-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.currentDoctor) {\n      app.setState({\n        currentDoctor: json.currentDoctor\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Read cookies to get selected Doctor\n\nexport const readSelectedDoctorCookie = app => {\n  const url = \"/doctors/contact-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.selectedDoctor) {\n      app.setState({\n        selectedDoctor: json.selectedDoctor\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // used to set state for the login process for doctor's end\n\nexport const updateLoginForm = (loginComp, field) => {\n  const value = field.value;\n  const name = field.name;\n  loginComp.setState({\n    [name]: value\n  });\n}; //doctor login\n\nexport const login = (loginComp, app) => {\n  const request = new Request(\"/doctors/login\", {\n    method: \"post\",\n    body: JSON.stringify(loginComp.state),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  }); // code used to bypass account authentication when server is down, remove as needed\n\n  if (loginComp.state.username === \"test\" && loginComp.state.password === \"test\") {\n    app.setState({\n      currentDoctor: {\n        \"username\": \"test1\"\n      }\n    });\n    return;\n  }\n\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    console.log(json);\n\n    if (json.currentDoctor !== undefined) {\n      app.setState({\n        currentDoctor: json.currentDoctor\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n    loginComp.setState({\n      wrong: true\n    });\n  });\n}; //doctor logout\n\nexport const logout = app => {\n  const url = \"/logout\";\n  fetch(url).then(res => {\n    app.setState({\n      currentDoctor: null,\n      message: {\n        type: \"\",\n        body: \"\"\n      },\n      selectedPatient: null\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Get all doctors\n\nexport const getDoctors = ppc => {\n  const url = \"/doctors\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    ppc.setState({\n      doctorInfo: json\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Update patient into doctor watchlist\n\nconst updateWatchlist = (doctor, patient) => {\n  const url = \"/doctors\";\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({\n      patient: patient,\n      doctor: doctor\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return new Promise(resolve => {\n    fetch(request).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    }).then(json => {\n      resolve(json);\n    }).catch(error => {\n      console.log(error);\n    });\n  });\n}; //Add patient to list button event listener(DoctorChatPage)\n\n\nexport const addPatientToWatchlist = (button, doctor, patient, app) => {\n  updateWatchlist(doctor, patient).then(res => {\n    if (res) {\n      app.state.currentDoctor.watchlist = res.watchlist;\n      button.innerText = \"Added!\";\n      setTimeout(function () {\n        button.innerText = \"Add to List\";\n      }, 1000);\n    } else {\n      button.innerText = \"Failed!\";\n      setTimeout(function () {\n        button.innerText = \"Add to List\";\n      }, 1000);\n    }\n  });\n}; //remove patients from doctor's watchlist\n\nexport const removePatientFromWatchlist = (app, patient) => {\n  const url = \"/doctors/delfwlist\";\n  const doctor = app.state.doctor;\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({\n      patient: patient,\n      doctor: doctor\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (json !== null && json !== undefined) {\n      console.log(json);\n      app.setState({\n        watchlist: json.watchlist\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Update selectedPatient cookie to null\n\nexport const updateSelectedPatient = () => {\n  const url = \"/patients/contact-session\";\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({\n      selectedPatient: null\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-type\": \"application/json\"\n    }\n  });\n  return new Promise(resolve => {\n    fetch(request).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    }).then(json => {\n      resolve(json);\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; //Add patient to doctor watchlist button event listener(Doctor Dashboard)\n\nexport const AddToWatchlist = (app, button, doctor, patient) => {\n  updateWatchlist(doctor, patient).then(json => {\n    if (json) {\n      button.setDisabled = true;\n      app.setState({\n        watchlist: json.watchlist,\n        success: \"Patient added to watchlist!\",\n        error: \"\"\n      });\n    } else {\n      throw new Error();\n    }\n  }).catch(error => {\n    button.disabled = true;\n    app.setState({\n      error: \"Failed to add patient to watchlist\",\n      success: \"\"\n    });\n    setTimeout(function () {\n      button.disabled = false;\n    }, 1000);\n  });\n}; //Set main.state.selectedDoctor by read selectedPatient cookie\n\nexport const endDoctorChat = app => {\n  updateSelectedPatient().then(json => {\n    if (json) {\n      app.setState({\n        selectedPatient: json.selectedPatient\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // get all the patients from database, used to search for patient in doctor dashboard\n\nexport const getPatients = app => {\n  const url = \"/patients\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (json !== null && json !== undefined) {\n      console.log(json);\n      app.setState({\n        patients: json\n      }); // app.setState({error: \"success\"})\n    } else {\n      app.setState({\n        error: \"Cannot retrieve patient accounts information!\"\n      });\n    }\n  }).catch(e => {\n    console.log(\"error caught\");\n    app.setState({\n      error: \"Cannot retrieve patient accounts information!\"\n    });\n  });\n}; // get all the patients from this doctor's watchlist, used for doctor dashboard's watchlist component\n\nexport const getWatchlist = (app, id) => {\n  const url = `/doctors/get-doctor-by-id/${id}`;\n  console.log(id);\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      console.log(\"returning json\");\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (json !== null && json !== undefined) {\n      console.log(json);\n      app.setState({\n        watchlist: json.watchlist\n      });\n    } else {\n      throw new Error();\n    }\n  }).catch(e => {\n    console.log(e);\n  });\n};","map":{"version":3,"sources":["/Users/yehuang/covid_consultant/client/src/actions/doctor.js"],"names":["readDoctorCookie","app","url","fetch","then","res","status","json","currentDoctor","setState","catch","error","console","log","readSelectedDoctorCookie","selectedDoctor","updateLoginForm","loginComp","field","value","name","login","request","Request","method","body","JSON","stringify","state","headers","Accept","username","password","undefined","wrong","logout","message","type","selectedPatient","getDoctors","ppc","doctorInfo","updateWatchlist","doctor","patient","Promise","resolve","addPatientToWatchlist","button","watchlist","innerText","setTimeout","removePatientFromWatchlist","Error","updateSelectedPatient","AddToWatchlist","setDisabled","success","disabled","endDoctorChat","getPatients","patients","e","getWatchlist","id"],"mappings":"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","sourcesContent":["//get doctor session cookie with doctor information back in order to keep doctor logged in\nexport const readDoctorCookie = (app) => {\n  const url = \"/doctors/check-session\";\n  fetch(url)\n      .then((res) => {\n          if (res.status === 200) {\n              return res.json();\n          }\n      })\n      .then((json) => {\n          if (json && json.currentDoctor) {\n              app.setState({currentDoctor: json.currentDoctor});\n          }\n      })\n      .catch((error) => {\n          console.log(error);\n      });\n};\n\n//Read cookies to get selected Doctor\nexport const readSelectedDoctorCookie = (app) => {\n  const url = \"/doctors/contact-session\";\n  fetch(url)\n      .then((res) => {\n          if (res.status === 200) {\n              return res.json();\n          }\n      })\n      .then((json) => {\n          if (json && json.selectedDoctor) {\n              app.setState({selectedDoctor: json.selectedDoctor});\n          }\n      })\n      .catch((error) => {\n          console.log(error);\n      });\n};\n\n// used to set state for the login process for doctor's end\nexport const updateLoginForm = (loginComp, field) => {\n  const value = field.value;\n  const name = field.name;\n\n  loginComp.setState({\n    [name]: value,\n  });\n};\n\n//doctor login\nexport const login = (loginComp, app) => {\n  const request = new Request(\"/doctors/login\", {\n    method: \"post\",\n    body: JSON.stringify(loginComp.state),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  // code used to bypass account authentication when server is down, remove as needed\n  if (loginComp.state.username === \"test\" && loginComp.state.password === \"test\") {\n    app.setState({currentDoctor: {\"username\": \"test1\"}});\n    return;\n}\n\n  fetch(request)\n      .then((res) => {\n          if (res.status === 200) {\n              return res.json();\n          }\n      })\n      .then((json) => {\n          console.log(json);\n          if (json.currentDoctor !== undefined) {\n              app.setState({currentDoctor: json.currentDoctor});\n          }\n      })\n      .catch((error) => {\n          console.log(error);\n          loginComp.setState({wrong: true});\n      });\n};\n\n//doctor logout\nexport const logout = (app) => {\n  const url = \"/logout\";\n\n  fetch(url)\n      .then((res) => {\n          app.setState({\n              currentDoctor: null,\n              message: {type: \"\", body: \"\"},\n              selectedPatient: null\n          });\n      })\n      .catch((error) => {\n          console.log(error);\n      });\n};\n\n//Get all doctors\nexport const getDoctors = (ppc) => {\n  const url = \"/doctors\";\n  fetch(url)\n      .then((res) => {\n          if (res.status === 200) {\n              return res.json();\n          }\n      })\n      .then((json) => {\n          ppc.setState({\n              doctorInfo: json,\n          });\n      })\n      .catch((error) => {\n          console.log(error);\n      });\n};\n\n//Update patient into doctor watchlist\nconst updateWatchlist = (doctor, patient) => {\n  const url = \"/doctors\";\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({\n      patient: patient,\n      doctor: doctor,\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return new Promise((resolve) => {\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            resolve(json);\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n  });\n};\n\n//Add patient to list button event listener(DoctorChatPage)\nexport const addPatientToWatchlist = (button, doctor, patient, app) => {\n  updateWatchlist(doctor, patient).then((res) => {\n    if (res) {\n      app.state.currentDoctor.watchlist = res.watchlist;\n      button.innerText = \"Added!\";\n      setTimeout(function () {\n        button.innerText = \"Add to List\";\n      }, 1000);\n    } else {\n      button.innerText = \"Failed!\";\n      setTimeout(function () {\n        button.innerText = \"Add to List\";\n      }, 1000);\n    }\n  });\n};\n\n//remove patients from doctor's watchlist\nexport const removePatientFromWatchlist = (app, patient) => {\n  const url = \"/doctors/delfwlist\";\n\n  const doctor = app.state.doctor;\n\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({\n      patient: patient,\n      doctor: doctor,\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  fetch(request)\n      .then((res) => {\n          if (res.status === 200) {\n              return res.json();\n          } else {\n              throw new Error();\n          }\n      })\n      .then((json) => {\n          if (json !== null && json !== undefined) {\n              console.log(json);\n              app.setState({watchlist: json.watchlist});\n          }\n      })\n      .catch((error) => {\n          console.log(error);\n      });\n};\n\n//Update selectedPatient cookie to null\nexport const updateSelectedPatient = () => {\n  const url = \"/patients/contact-session\";\n  const request = new Request(url, {\n    method: \"put\",\n    body: JSON.stringify({\n      selectedPatient: null,\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-type\": \"application/json\",\n    },\n  });\n  return new Promise((resolve) => {\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            resolve(json);\n        });\n  }).catch((error) => {\n    console.log(error);\n  });\n};\n\n//Add patient to doctor watchlist button event listener(Doctor Dashboard)\nexport const AddToWatchlist = (app, button, doctor, patient) => {\n  updateWatchlist(doctor, patient)\n      .then((json) => {\n          if (json) {\n              button.setDisabled = true;\n              app.setState({\n                  watchlist: json.watchlist,\n                  success: \"Patient added to watchlist!\",\n                  error: \"\",\n              });\n          } else {\n              throw new Error();\n          }\n      })\n      .catch((error) => {\n          button.disabled = true;\n          app.setState({\n              error: \"Failed to add patient to watchlist\",\n              success: \"\",\n          });\n          setTimeout(function () {\n              button.disabled = false;\n          }, 1000);\n      });\n};\n\n//Set main.state.selectedDoctor by read selectedPatient cookie\nexport const endDoctorChat = (app) => {\n  updateSelectedPatient()\n      .then((json) => {\n          if (json) {\n              app.setState({\n                  selectedPatient: json.selectedPatient,\n              });\n          }\n      })\n      .catch((error) => {\n          console.log(error);\n      });\n};\n\n// get all the patients from database, used to search for patient in doctor dashboard\nexport const getPatients = (app) => {\n  const url = \"/patients\";\n\n  fetch(url)\n      .then((res) => {\n          if (res.status === 200) {\n              return res.json();\n          } else {\n              throw new Error();\n          }\n      })\n      .then((json) => {\n          if (json !== null && json !== undefined) {\n              console.log(json);\n              app.setState({patients: json});\n              // app.setState({error: \"success\"})\n          } else {\n              app.setState({\n                  error: \"Cannot retrieve patient accounts information!\",\n              });\n          }\n      })\n      .catch((e) => {\n          console.log(\"error caught\");\n          app.setState({error: \"Cannot retrieve patient accounts information!\"});\n      });\n};\n\n// get all the patients from this doctor's watchlist, used for doctor dashboard's watchlist component\nexport const getWatchlist = (app, id) => {\n  const url = `/doctors/get-doctor-by-id/${id}`;\n  console.log(id);\n\n  fetch(url)\n      .then((res) => {\n          if (res.status === 200) {\n              console.log(\"returning json\");\n              return res.json();\n          } else {\n              throw new Error();\n          }\n      })\n      .then((json) => {\n          if (json !== null && json !== undefined) {\n              console.log(json);\n              app.setState({watchlist: json.watchlist});\n          } else {\n              throw new Error();\n          }\n      })\n      .catch((e) => {\n          console.log(e);\n      });\n};\n"]},"metadata":{},"sourceType":"module"}