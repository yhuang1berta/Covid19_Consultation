{"ast":null,"code":"var _jsxFileName = \"/Users/yehuang/309_group/client/src/components/AdminDashboard/DoctorTable.js\";\nimport React from 'react';\nimport './styles.css';\nimport \"react-table-v6/react-table.css\";\nimport { getDoctors } from \"../../actions/admin\";\nimport { Table, TableHeader } from \"react-mdl\";\nimport { updateDoctor } from \"../../actions/admin\";\n\nclass DoctorTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      doctors: [],\n      error: \"\",\n      success: \"\",\n      activeTab: 0\n    };\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleDoctorTypeChange = this.handleDoctorTypeChange.bind(this);\n  }\n\n  componentWillMount() {\n    getDoctors(this);\n  }\n\n  render() {\n    const doctor_list = this.state.doctors.map(user => ({\n      name: /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: user.username,\n        onChange: this.handleNameChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 20\n        }\n      }),\n      Id: user._id,\n      password: /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.handlePasswordChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 23\n        }\n      }),\n      location: /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: user.location,\n        onChange: this.handleLocationChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 23\n        }\n      }),\n      doctorType: /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: user.doctorType,\n        onChange: this.handleDoctorTypeChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }\n      }),\n      edit: /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => updateDoctor(this, user),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 19\n        }\n      }, \"Edit\")\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, this.state.error), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, this.state.success), /*#__PURE__*/React.createElement(Table, {\n      sortable: true,\n      shadow: 1,\n      rows: doctor_list,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableHeader, {\n      name: \"Id\",\n      sortFn: (a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0]),\n      tooltip: \"The id of the users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \"User Id\"), /*#__PURE__*/React.createElement(TableHeader, {\n      name: \"name\",\n      sortFn: (a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0]),\n      tooltip: \"The name of the users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(TableHeader, {\n      name: \"password\" // sortFn={(a, b, isAsc) => (isAsc ? a.value : b.value).match(/(.*)/)[0].localeCompare((isAsc ? b.value : a.value).match(/(.*)/)[0])}\n      ,\n      tooltip: \"Enter new password for the user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, \"New Password\"), /*#__PURE__*/React.createElement(TableHeader, {\n      name: \"location\" // sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n      ,\n      tooltip: \"The province of the users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, \"Province\"), /*#__PURE__*/React.createElement(TableHeader, {\n      name: \"doctorType\" // sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n      ,\n      tooltip: \"The field the user specializes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, \"Doctor Type\"), /*#__PURE__*/React.createElement(TableHeader, {\n      name: \"edit\" // sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n      ,\n      tooltip: \"Click the edit button to update the user's information\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, \"Edit\")));\n  }\n\n  handleNameChange(event) {\n    const changed_id = event.target.parentElement.parentElement.firstElementChild.innerText;\n    const new_state = this.state.doctors.slice();\n    console.log(new_state[0]._id);\n\n    for (let i = 0; i < new_state.length; i++) {\n      if (new_state[i]._id === changed_id) {\n        new_state[i].username = event.target.value;\n        break;\n      }\n    }\n\n    this.setState({\n      doctors: new_state\n    });\n  }\n\n  handlePasswordChange(event) {\n    console.log(event.target.parentElement.parentElement.firstElementChild.innerText);\n    const changed_id = event.target.parentElement.parentElement.firstElementChild.innerText;\n    const new_state = this.state.doctors.slice();\n\n    for (let i = 0; i < new_state.length; i++) {\n      if (new_state[i]._id === changed_id) {\n        new_state[i].password = event.target.value;\n        break;\n      }\n    }\n\n    this.setState({\n      doctors: new_state\n    });\n  }\n\n  handleLocationChange(event) {\n    const changed_id = event.target.parentElement.parentElement.firstElementChild.innerText;\n    const new_state = this.state.doctors.slice();\n\n    for (let i = 0; i < new_state.length; i++) {\n      if (new_state[i]._id === changed_id) {\n        new_state[i].location = event.target.value;\n        break;\n      }\n    }\n\n    this.setState({\n      doctors: new_state\n    });\n  }\n\n  handleDoctorTypeChange(event) {\n    const changed_id = event.target.parentElement.parentElement.firstElementChild.innerText;\n    const new_state = this.state.doctors.slice();\n\n    for (let i = 0; i < new_state.length; i++) {\n      if (new_state[i]._id === changed_id) {\n        new_state[i].doctorType = event.target.value;\n        break;\n      }\n    }\n\n    this.setState({\n      doctors: new_state\n    });\n  }\n\n}\n\nexport default DoctorTable;","map":{"version":3,"sources":["/Users/yehuang/309_group/client/src/components/AdminDashboard/DoctorTable.js"],"names":["React","getDoctors","Table","TableHeader","updateDoctor","DoctorTable","Component","constructor","props","state","doctors","error","success","activeTab","handleNameChange","bind","handlePasswordChange","handleLocationChange","handleDoctorTypeChange","componentWillMount","render","doctor_list","map","user","name","username","Id","_id","password","location","doctorType","edit","a","b","isAsc","match","localeCompare","event","changed_id","target","parentElement","firstElementChild","innerText","new_state","slice","console","log","i","length","value","setState"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './styles.css'\nimport \"react-table-v6/react-table.css\";\nimport {getDoctors} from \"../../actions/admin\"\nimport {Table, TableHeader} from \"react-mdl\"\nimport {updateDoctor} from \"../../actions/admin\"\n\nclass DoctorTable extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state= {\n            doctors: [],\n            error: \"\",\n            success: \"\",\n            activeTab: 0\n        }\n        this.handleNameChange = this.handleNameChange.bind(this)\n        this.handlePasswordChange = this.handlePasswordChange.bind(this)\n        this.handleLocationChange = this.handleLocationChange.bind(this)\n        this.handleDoctorTypeChange = this.handleDoctorTypeChange.bind(this)\n        \n    }\n\n    componentWillMount() {\n        getDoctors(this)\n    }\n\n    render() {\n\n        const doctor_list = this.state.doctors.map((user)=>(\n            {name: <input type=\"text\" value={user.username} onChange={this.handleNameChange}/>, \n            Id: user._id, \n            password: <input type=\"text\" onChange={this.handlePasswordChange} />,\n            location: <input type=\"text\" value={user.location} onChange={this.handleLocationChange} />,\n            doctorType: <input type=\"text\" value={user.doctorType} onChange={this.handleDoctorTypeChange} />,\n            edit: <button onClick={()=> updateDoctor(this, user)} >Edit</button>\n            }\n          ))\n        \n\n        return (\n            <div>\n                <h3 className=\"error\">{this.state.error}</h3>\n                <h3 className=\"success\">{this.state.success}</h3>\n                <Table \n                sortable \n                shadow={1} \n                rows={doctor_list}\n                >\n            \n                    <TableHeader\n                    name=\"Id\"\n                    sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n                    tooltip=\"The id of the users\"\n                    >\n                    User Id\n                    </TableHeader>\n\n                    <TableHeader\n                    name=\"name\"\n                    sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n                    tooltip=\"The name of the users\"\n                    >\n                    Name\n                    </TableHeader>\n                    \n                    <TableHeader\n                    name=\"password\"\n                    // sortFn={(a, b, isAsc) => (isAsc ? a.value : b.value).match(/(.*)/)[0].localeCompare((isAsc ? b.value : a.value).match(/(.*)/)[0])}\n                    tooltip=\"Enter new password for the user\"\n                    >\n                    New Password\n                    </TableHeader>\n\n                    <TableHeader\n                    name=\"location\"\n                    // sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n                    tooltip=\"The province of the users\"\n                    >\n                    Province\n                    </TableHeader>\n\n                    <TableHeader\n                    name=\"doctorType\"\n                    // sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n                    tooltip=\"The field the user specializes\"\n                    >\n                    Doctor Type\n                    </TableHeader>\n\n                    <TableHeader\n                    name=\"edit\"\n                    // sortFn={(a, b, isAsc) => (isAsc ? a : b).match(/(.*)/)[0].localeCompare((isAsc ? b : a).match(/(.*)/)[0])}\n                    tooltip=\"Click the edit button to update the user's information\"\n                    >\n                    Edit\n                    </TableHeader>\n                </Table>\n            </div>\n        )\n    }\n\n    handleNameChange(event) {\n        const changed_id= event.target.parentElement.parentElement.firstElementChild.innerText\n        const new_state= this.state.doctors.slice()\n        console.log(new_state[0]._id)\n        for (let i = 0; i < new_state.length; i++) {\n            if (new_state[i]._id === changed_id) {\n                new_state[i].username = event.target.value\n                break\n            }\n        }\n        this.setState({doctors: new_state})\n    }\n\n    handlePasswordChange(event) {\n        console.log(event.target.parentElement.parentElement.firstElementChild.innerText)\n        const changed_id= event.target.parentElement.parentElement.firstElementChild.innerText\n        const new_state= this.state.doctors.slice()\n        for (let i = 0; i < new_state.length; i++) {\n            if (new_state[i]._id === changed_id) {\n                new_state[i].password = event.target.value\n                break\n            }\n        }\n        this.setState({doctors: new_state})\n    }\n\n    handleLocationChange(event) {\n        const changed_id= event.target.parentElement.parentElement.firstElementChild.innerText\n        const new_state= this.state.doctors.slice()\n        for (let i = 0; i < new_state.length; i++) {\n            if (new_state[i]._id === changed_id) {\n                new_state[i].location = event.target.value\n                break\n            }\n        }\n        this.setState({doctors: new_state})\n    }\n\n    handleDoctorTypeChange(event) {\n        const changed_id= event.target.parentElement.parentElement.firstElementChild.innerText\n        const new_state= this.state.doctors.slice()\n        for (let i = 0; i < new_state.length; i++) {\n            if (new_state[i]._id === changed_id) {\n                new_state[i].doctorType = event.target.value\n                break\n            }\n        }\n        this.setState({doctors: new_state})\n    }\n\n}\n\nexport default DoctorTable"]},"metadata":{},"sourceType":"module"}