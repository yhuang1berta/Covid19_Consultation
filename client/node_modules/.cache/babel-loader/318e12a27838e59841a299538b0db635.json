{"ast":null,"code":"import _defineProperty from\"/Users/yehuang/covid_consultant/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";// used to verify the account that is login in, and set the current patient to the patient that's login in.\nexport var readPatientCookie=function readPatientCookie(app){var url=\"/patients/check-session\";fetch(url).then(function(res){if(res.status===200){return res.json();}}).then(function(json){if(json&&json.currentPatient){app.setState({currentPatient:json.currentPatient});}}).catch(function(error){console.log(error);});};//read cookie to get selected patient\nexport var readSelectedPatientCookie=function readSelectedPatientCookie(app){var url=\"/patients/contact-session\";fetch(url).then(function(res){if(res.status===200){return res.json();}}).then(function(json){if(json&&json.selectedPatient){app.setState({selectedPatient:json.selectedPatient});}}).catch(function(error){console.log(error);});};// used to set state for the login process for patient's end\nexport var updateLoginForm=function updateLoginForm(loginComp,field){var value=field.value;var name=field.name;loginComp.setState(_defineProperty({},name,value));};export var login=function login(loginComp,app){var request=new Request(\"/patients/login\",{method:\"post\",body:JSON.stringify(loginComp.state),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});fetch(request).then(function(res){if(res.status===200){return res.json();}}).then(function(json){console.log(json);console.log(json.currentPatient);if(json.currentPatient!==null&&json.currentPatient.username!==undefined){console.log(\"entered\");app.setState({currentPatient:json.currentPatient});console.log(app.state);}}).catch(function(error){console.log(error);loginComp.setState({wrong:true});});};// used to send register request to server end\nexport var register=function register(registerComp,app,history){var url=\"/patients\";var patient=registerComp.state;var request=new Request(url,{method:\"post\",body:JSON.stringify(patient),headers:{Accept:\"application/json, text/plain, */*\",\"Content-type\":\"application/json\"}});fetch(request).then(function(res){if(res.status===200){return res.json();}else{throw new Error();}}).then(function(json){if(!app.state.currentPatient&&app.state.currentPatient!==undefined){// app.setState({currentPatient: json})\nhistory.push(\"/PatientLogin\");}}).catch(function(e){registerComp.error=\"Patient account cannot be created at the moment!\";registerComp.setState(registerComp.state);});};// Log out from the current user on patient end.\nexport var logout=function logout(app){var url=\"/logout\";fetch(url).then(function(res){app.setState({currentPatient:null,message:{type:\"\",body:\"\"},selectedDoctor:null});}).catch(function(error){console.log(error);});};//Update selectedDoctor cookie to null\nexport var updateSelectedDoctor=function updateSelectedDoctor(){var url=\"/doctors/contact-session\";var request=new Request(url,{method:\"put\",body:JSON.stringify({selectedDoctor:null}),headers:{Accept:\"application/json, text/plain, */*\",\"Content-type\":\"application/json\"}});return new Promise(function(resolve){fetch(request).then(function(res){if(res.status===200){return res.json();}}).then(function(json){resolve(json);});}).catch(function(error){console.log(error);});};//Set main.state.selectedDoctor by read selectedDoctor cookie\nexport var endPatientChat=function endPatientChat(app){updateSelectedDoctor().then(function(json){if(json){app.setState({selectedDoctor:json.selectedDoctor});}}).catch(function(error){console.log(error);});};// used to send request to get all patient objects, used in PatientTable component in admin dashboard to get all patients\nexport var readPatientVisitHistory=function readPatientVisitHistory(app){var patient=app.state.patient;console.log(\"patient:\");console.log(patient);var url=\"/patients/read-patient-visit-history/\".concat(patient.id);fetch(url).then(function(res){if(res.status===200){return res.json();}else{throw new Error();}}).then(function(json){if(json!==null&&json!==undefined){app.setState({patient:json,loading:false});console.log(\"state resetted\");}}).catch(function(e){console.log(e);});};","map":{"version":3,"sources":["/Users/yehuang/covid_consultant/client/src/actions/patients.js"],"names":["readPatientCookie","app","url","fetch","then","res","status","json","currentPatient","setState","catch","error","console","log","readSelectedPatientCookie","selectedPatient","updateLoginForm","loginComp","field","value","name","login","request","Request","method","body","JSON","stringify","state","headers","Accept","username","undefined","wrong","register","registerComp","history","patient","Error","push","e","logout","message","type","selectedDoctor","updateSelectedDoctor","Promise","resolve","endPatientChat","readPatientVisitHistory","id","loading"],"mappings":"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","sourcesContent":["// used to verify the account that is login in, and set the current patient to the patient that's login in.\nexport const readPatientCookie = (app) => {\n    const url = \"/patients/check-session\";\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && json.currentPatient) {\n                app.setState({currentPatient: json.currentPatient});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n};\n\n//read cookie to get selected patient\nexport const readSelectedPatientCookie = (app) => {\n    const url = \"/patients/contact-session\";\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && json.selectedPatient) {\n                app.setState({selectedPatient: json.selectedPatient});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n};\n\n// used to set state for the login process for patient's end\nexport const updateLoginForm = (loginComp, field) => {\n    const value = field.value;\n    const name = field.name;\n\n    loginComp.setState({\n        [name]: value,\n    });\n};\n\n\nexport const login = (loginComp, app) => {\n    const request = new Request(\"/patients/login\", {\n        method: \"post\",\n        body: JSON.stringify(loginComp.state),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            console.log(json);\n            console.log(json.currentPatient);\n            if (json.currentPatient !== null && json.currentPatient.username !== undefined) {\n                console.log(\"entered\")\n                app.setState({currentPatient: json.currentPatient});\n                console.log(app.state)\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n            loginComp.setState({wrong: true})\n        })\n\n\n};\n\n// used to send register request to server end\nexport const register = (registerComp, app, history) => {\n    const url = \"/patients\";\n\n    const patient = registerComp.state;\n\n    const request = new Request(url, {\n        method: \"post\",\n        body: JSON.stringify(patient),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-type\": \"application/json\",\n        },\n    });\n    fetch(request)\n        .then(function (res) {\n            if (res.status === 200) {\n                return res.json()\n            } else {\n                throw new Error()\n            }\n        })\n        .then((json) => {\n            if (!app.state.currentPatient && app.state.currentPatient !== undefined) {\n                // app.setState({currentPatient: json})\n                history.push(\"/PatientLogin\")\n            }\n        })\n        .catch((e) => {\n            registerComp.error = \"Patient account cannot be created at the moment!\"\n            registerComp.setState(registerComp.state)\n        })\n};\n\n// Log out from the current user on patient end.\nexport const logout = (app) => {\n    const url = \"/logout\";\n    fetch(url)\n        .then((res) => {\n            app.setState({\n                currentPatient: null,\n                message: {type: \"\", body: \"\"},\n                selectedDoctor: null\n            });\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n};\n\n//Update selectedDoctor cookie to null\nexport const updateSelectedDoctor = () => {\n    const url = \"/doctors/contact-session\";\n    const request = new Request(url, {\n        method: \"put\",\n        body: JSON.stringify({\n            selectedDoctor: null\n        }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-type\": \"application/json\",\n        },\n    });\n    return new Promise(resolve => {\n        fetch(request).then(res => {\n            if (res.status === 200) {\n                return res.json()\n            }\n        }).then(json => {\n            resolve(json)\n        })\n    }).catch(error => {\n        console.log(error)\n    })\n};\n\n//Set main.state.selectedDoctor by read selectedDoctor cookie\nexport const endPatientChat = (app) => {\n\n    updateSelectedDoctor().then(json => {\n        if (json) {\n            app.setState(\n                {\n                    selectedDoctor: json.selectedDoctor\n                })\n        }\n    })\n        .catch(error => {\n        console.log(error);\n    });\n};\n\n// used to send request to get all patient objects, used in PatientTable component in admin dashboard to get all patients\nexport const readPatientVisitHistory = (app) => {\n\n    const patient = app.state.patient\n    console.log(\"patient:\")\n    console.log(patient)\n    const url = `/patients/read-patient-visit-history/${patient.id}`\n\n    fetch(url)\n    .then((res) => {\n        if (res.status === 200) {\n            return res.json()\n        } else {\n            throw new Error()\n        }\n    })\n    .then((json) => {\n        if (json !== null && json !== undefined) {\n            app.setState({patient: json, loading: false})\n            console.log(\"state resetted\")\n        }\n    })\n    .catch((e) => {\n        console.log(e)\n    })\n}\n\n"]},"metadata":{},"sourceType":"module"}