{"ast":null,"code":"//get admin session cookie with admin information back in order to keep admin logged in\nexport const readAdminCookie = app => {\n  const url = \"/admins/check-session\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    if (json && json.currentAdmin) {\n      app.setState({\n        currentAdmin: json.currentAdmin\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}; // used to set state for the login process for admin's end\n\nexport const updateLoginForm = (loginComp, field) => {\n  const value = field.value;\n  const name = field.name;\n  loginComp.setState({\n    [name]: value\n  });\n}; //admin login\n\nexport const login = (loginComp, app) => {\n  const request = new Request(\"/admins/login\", {\n    method: \"post\",\n    body: JSON.stringify(loginComp.state),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      console.log(res.status);\n      throw new Error();\n    }\n  }).then(json => {\n    console.log(json);\n\n    if (json.currentAdmin !== null && json.currentAdmin.username !== undefined) {\n      app.setState({\n        currentAdmin: json.currentAdmin\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n    loginComp.setState({\n      wrong: true\n    });\n  });\n}; //admin logout\n\nexport const logout = app => {\n  const url = \"/logout\";\n  fetch(url).then(res => {\n    app.setState({\n      currentAdmin: null,\n      message: {\n        type: \"\",\n        body: \"\"\n      }\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; // Get all the doctor objects for Doctor table component in admin dashboard\n\nexport const getDoctors = app => {\n  const url = \"/doctors\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (json !== null && json !== undefined) {\n      console.log(\"getDoctor before: \");\n      console.log(app.state);\n      app.setState({\n        doctors: json\n      });\n      console.log(\"getDoctor after: \");\n      console.log(app.state);\n    } else {\n      app.setState({\n        error: \"Cannot retrieve Doctor accounts information!\"\n      });\n    }\n  }).catch(e => {\n    app.setState({\n      error: \"Cannot retrieve Doctor accounts information!\"\n    });\n  });\n}; // Get all the patient objects for Doctor table component in admin dashboard\n\nexport const getPatients = app => {\n  const url = \"/patients\";\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error();\n    }\n  }).then(json => {\n    if (json !== null && json !== undefined) {\n      app.setState({\n        patients: json\n      }); // app.setState({error: \"success\"})\n    } else {\n      app.setState({\n        error: \"Cannot retrieve patient accounts information!\"\n      });\n    }\n  }).catch(e => {\n    app.setState({\n      error: \"Cannot retrieve patient accounts information!\"\n    });\n  });\n}; // used to send update request to patient object after admin end changes its info.\n\nexport const updatePatient = (app, patient) => {\n  const request = new Request(`/admins/patient-update/${patient._id}`, {\n    method: \"put\",\n    body: JSON.stringify({\n      patient: patient\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  console.log(JSON.stringify(patient));\n  console.log(patient._id);\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      app.setState({\n        error: \"\",\n        success: `Patient (id: ${patient._id}) updated sucessfully!`\n      });\n    } else {\n      throw new Error();\n    }\n  }).catch(e => {\n    app.setState({\n      error: \"Update Failed, please try again later!\",\n      success: \"\"\n    });\n  });\n}; // used to send update request to doctor object after admin end changes its info.\n\nexport const updateDoctor = (app, doctor) => {\n  const request = new Request(`/admins/doctor-update/${doctor._id}`, {\n    method: \"put\",\n    body: JSON.stringify({\n      doctor: doctor\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  console.log(doctor);\n  fetch(request).then(res => {\n    if (res.status === 200) {\n      app.setState({\n        error: \"\",\n        success: `Doctor (id: ${doctor._id}) updated sucessfully!`\n      });\n    } else {\n      throw new Error();\n    }\n  }).catch(e => {\n    app.setState({\n      error: \"Update Failed, please try again later!\",\n      success: \"\"\n    });\n  });\n};","map":{"version":3,"sources":["/Users/yehuang/309_group/client/src/actions/admin.js"],"names":["readAdminCookie","app","url","fetch","then","res","status","json","currentAdmin","setState","catch","error","console","log","updateLoginForm","loginComp","field","value","name","login","request","Request","method","body","JSON","stringify","state","headers","Accept","Error","username","undefined","wrong","logout","message","type","getDoctors","doctors","e","getPatients","patients","updatePatient","patient","_id","success","updateDoctor","doctor"],"mappings":"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","sourcesContent":["//get admin session cookie with admin information back in order to keep admin logged in\nexport const readAdminCookie = (app) => {\n    const url = \"/admins/check-session\";\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then((json) => {\n            if (json && json.currentAdmin) {\n                app.setState({currentAdmin: json.currentAdmin});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n};\n\n// used to set state for the login process for admin's end\nexport const updateLoginForm = (loginComp, field) => {\n    const value = field.value;\n    const name = field.name;\n\n    loginComp.setState({\n        [name]: value,\n    });\n};\n\n//admin login\nexport const login = (loginComp, app) => {\n    const request = new Request(\"/admins/login\", {\n        method: \"post\",\n        body: JSON.stringify(loginComp.state),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            } else {\n                console.log(res.status);\n                throw new Error();\n            }\n        })\n        .then((json) => {\n            console.log(json);\n            if (\n                json.currentAdmin !== null &&\n                json.currentAdmin.username !== undefined\n            ) {\n                app.setState({currentAdmin: json.currentAdmin});\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n            loginComp.setState({wrong: true});\n        });\n};\n\n//admin logout\nexport const logout = (app) => {\n    const url = \"/logout\";\n\n    fetch(url)\n        .then((res) => {\n            app.setState({\n                currentAdmin: null,\n                message: {type: \"\", body: \"\"},\n            });\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n};\n\n// Get all the doctor objects for Doctor table component in admin dashboard\nexport const getDoctors = (app) => {\n    const url = \"/doctors\";\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            } else {\n                throw new Error();\n            }\n        })\n        .then((json) => {\n            if (json !== null && json !== undefined) {\n                console.log(\"getDoctor before: \");\n                console.log(app.state);\n                app.setState({doctors: json});\n                console.log(\"getDoctor after: \");\n                console.log(app.state);\n            } else {\n                app.setState({error: \"Cannot retrieve Doctor accounts information!\"});\n            }\n        })\n        .catch((e) => {\n            app.setState({error: \"Cannot retrieve Doctor accounts information!\"});\n        });\n};\n\n// Get all the patient objects for Doctor table component in admin dashboard\nexport const getPatients = (app) => {\n    const url = \"/patients\";\n\n    fetch(url)\n        .then((res) => {\n            if (res.status === 200) {\n                return res.json();\n            } else {\n                throw new Error();\n            }\n        })\n        .then((json) => {\n            if (json !== null && json !== undefined) {\n                app.setState({patients: json});\n                // app.setState({error: \"success\"})\n            } else {\n                app.setState({\n                    error: \"Cannot retrieve patient accounts information!\",\n                });\n            }\n        })\n        .catch((e) => {\n            app.setState({error: \"Cannot retrieve patient accounts information!\"});\n        });\n};\n\n// used to send update request to patient object after admin end changes its info.\nexport const updatePatient = (app, patient) => {\n    const request = new Request(`/admins/patient-update/${patient._id}`, {\n        method: \"put\",\n        body: JSON.stringify({patient: patient}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    console.log(JSON.stringify(patient));\n    console.log(patient._id);\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                app.setState({\n                    error: \"\",\n                    success: `Patient (id: ${patient._id}) updated sucessfully!`,\n                });\n            } else {\n                throw new Error();\n            }\n        })\n        .catch((e) => {\n            app.setState({\n                error: \"Update Failed, please try again later!\",\n                success: \"\",\n            });\n        });\n};\n\n// used to send update request to doctor object after admin end changes its info.\nexport const updateDoctor = (app, doctor) => {\n    const request = new Request(`/admins/doctor-update/${doctor._id}`, {\n        method: \"put\",\n        body: JSON.stringify({doctor: doctor}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    console.log(doctor);\n\n    fetch(request)\n        .then((res) => {\n            if (res.status === 200) {\n                app.setState({\n                    error: \"\",\n                    success: `Doctor (id: ${doctor._id}) updated sucessfully!`,\n                });\n            } else {\n                throw new Error();\n            }\n        })\n        .catch((e) => {\n            app.setState({\n                error: \"Update Failed, please try again later!\",\n                success: \"\",\n            });\n        });\n};\n"]},"metadata":{},"sourceType":"module"}